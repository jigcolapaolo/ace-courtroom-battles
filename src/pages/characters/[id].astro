---
import { CHARACTERS, RANK_TYPES } from "@/lib/consts"
import Layout from "@/layouts/Layout.astro"
import type { Character } from "@/env"
import Navbar from "@/components/sections/Navbar.astro"

import { getSession } from 'auth-astro/server'
import { generateUserId } from "@/lib/users"
import { prisma } from "prisma/client"
import CharacterQuotes from "@/components/sections/CharacterQuotes.astro"

const session = await getSession(Astro.request)

const userId = session ? generateUserId(session.user) : null
const rankings = userId == null ?
    [] : 
    await prisma.rankings.findMany({
        where: { userId },
        select: {
            characterId: true,
            rankId: true,
        },
    });
const userRankings: Record<string, string> = {}
rankings.forEach((rank) => {
    userRankings[rank.characterId] = rank.rankId
})


const { id } = Astro.params
const character = CHARACTERS.find(({ id: charId }) => charId === Number(id))
if (!character) {
    return Astro.redirect("/404")
}
const { 
    name,
    type, 
    quotes, 
    alias, 
    birthYear, 
    eyeColor, 
    hairColor, 
    height, 
    debutEpisode, 
    objectionSound, 
    musicalTheme, 
    musicalThemeLink 
} = character as Character
const firstName = name.split(' ')[0].toLowerCase()
---

<Layout title=`${name} - Details`>
    <Navbar />
    <main class="my-10">
        <section class="w-full">
            <div class="flex justify-center w-full">
                <aside class="w-[30%] flex flex-col justify-around">
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Alias
                        </p>
                        <span>{alias}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Birth Year
                        </p>
                        <span>{birthYear}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Debut Episode
                        </p>
                        <span>{debutEpisode}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Type 
                        </p>
                        <img 
                        transition:name="character-badge"
                        class="character-badge w-20 h-auto "
                        alt="Image of badge" 
                        src={`/badges/${type}-badge.webp`}
                        />
                        <span>{type.charAt(0).toUpperCase() + type.slice(1)}</span>
                    </div>
                </aside>
                <picture class="w-[40%]">
                    <img 
                        transition:name="character-img-lg"
                        alt=`Image of ${name}` 
                        src=`/characters/${firstName}-lg-select.webp` 
                        style="filter: drop-shadow(0 0 10px var(--color-fourth));"
                    />
                </picture>
                <aside class="w-[30%] flex flex-col justify-around">
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Hair Color
                        </p>
                        <span>{hairColor}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Eye Color
                        </p>
                        <span>{eyeColor}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Height
                        </p>
                        <span>{height}</span>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <p class="data-title text-lg">
                            Musical Theme
                        </p>
                        <a href={musicalThemeLink} target="_blank">{musicalTheme}</a>
                    </div>
                    <div class="flex flex-col items-center justify-center">
                        <img src="/objection.webp" alt="Image of objection" class="objection-img w-20 h-auto cursor-pointer hover:animate-bouncing" />
                    </div>
                </aside>
            </div>
            <h1 class="text-5xl text-center font-medium text-badge mb-12" transition:name="character-title">
                {name}
            </h1>
        </section>
        <CharacterQuotes quotes={quotes} />
        <section>
            {
                session ? (
                    <div class="flex items-center justify-center gap-4">
                        <img class="size-12 rounded-full" src={session.user?.image} alt={`Image of ${session.user?.name}`} />
                        <div class="flex justify-center flex-col">
                            <h4 class="text-xl font-bold">{session.user?.name}</h4>
                            <button id="logout" aria-label="Logout" class="font-light text-sm text-badge">Logout</button>
                        </div>
                    </div>
                    <div>
                        <button 
                            class:list={[
                                "text-badge rank-character",
                                {
                                    "is-liked": userRankings[id as string] === RANK_TYPES.LIKE,
                                }
                            ]}
                            data-character-id={id}
                            data-character-first-name={firstName}
                            data-rank-id={RANK_TYPES.LIKE}
                        >{RANK_TYPES.LIKE}</button>
                        <button 
                            class:list={[
                                "text-badge rank-character",
                                {
                                    "is-disliked": userRankings[id as string] === RANK_TYPES.DISLIKE
                                }
                            ]}
                            data-character-id={id}
                            data-character-first-name={firstName}
                            data-rank-id={RANK_TYPES.DISLIKE}
                        >{RANK_TYPES.DISLIKE}</button>
                    </div>
                ) : (
                    <div class="flex flex-col">
                        <button 
                            id="login" 
                            aria-label="Login" 
                            class="font-light text-sm text-badge"
                        >Login</button>
                        <small>To like or dislike, you must have a Google account</small>
                    </div>
                )
            }
        </section>
    </main>
    <audio id="objection-sound" src={objectionSound}></audio>
    <audio id="snap-sound" src="/snap-sound.mp3"></audio>
    <audio id="damage-sound" src="/damage-sound.mp3"></audio>
</Layout>


<script>
    import { RANK_TYPES } from "@/lib/consts";

    document.addEventListener("astro:page-load", () => {
        const rankButtons = document.querySelectorAll(".rank-character") as NodeListOf<HTMLButtonElement>;
        const snapSound = document.getElementById("snap-sound") as HTMLAudioElement;
        const damageSound = document.getElementById("damage-sound") as HTMLAudioElement;
    
        rankButtons.forEach(button => {

            button.onclick = () => {

                const buttonParent = button.parentElement as HTMLElement;
                let previousRank: HTMLElement;
                let previousRankIsLiked: boolean

                if (buttonParent && buttonParent.querySelector(".is-liked, .is-disliked")) {
                    previousRank = buttonParent.querySelector(".is-liked, .is-disliked") as HTMLElement;
                    previousRankIsLiked = previousRank ? previousRank.classList.contains("is-liked") : false
                    if (previousRankIsLiked) 
                        previousRank.classList.remove("is-liked")
                    else 
                        previousRank.classList.remove("is-disliked")

                }

                if (button.textContent === RANK_TYPES.LIKE) {
                    button.classList.add("is-liked")
                } else if (button.textContent === RANK_TYPES.DISLIKE) {
                    button.classList.add("is-disliked")
                }


                
                const rollBackUI = () => {
                    if (button.classList.contains("is-liked"))
                        button.classList.remove("is-liked") 
                    else if (button.classList.contains("is-disliked")) 
                        button.classList.remove("is-disliked")
                    
                    
                    if (previousRank && previousRankIsLiked)
                        previousRank.classList.add("is-liked")
                    else 
                        previousRank.classList.add("is-disliked")
                    
                    window.toast({
                        title: `‚ùå Error ranking`,
                        location: "bottom-center",
                        dismissable: true,
                        type: "error",
                    })
                    damageSound.play();
                    
                }

                const { characterId, rankId, characterFirstName } = button.dataset;

                fetch(`/api/rank/${characterId}`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ rankId, characterFirstName })
                })
                .then(res => {
                    if (!res.ok) return rollBackUI();
                    window.toast({
                        title: `‚úÖ Ranked successfully`,
                        location: "bottom-center",
                        dismissable: true,
                        type: "success",
                    })
                    snapSound.play();
                })
                .catch(() => rollBackUI())
            }
        })
    })

</script>

<script>
    const { signIn, signOut } = await import('auth-astro/client')
    
    document.addEventListener("astro:page-load", async () => {

        const loginButton = document.querySelector("#login") as HTMLButtonElement
        const logoutButton = document.querySelector("#logout") as HTMLButtonElement
    
        if (loginButton) loginButton.onclick = () => {
            signIn("github")
            loginButton.ariaDisabled = "true"
            loginButton.disabled = true
            loginButton.textContent = "Logging in..."
        }
        if (logoutButton) logoutButton.onclick = () => signOut()
    })

</script>

<script>
    document.addEventListener("astro:page-load", () => {
        const objection = document.querySelector('.objection-img') as HTMLImageElement;
        const objectionSound = document.getElementById("objection-sound") as HTMLAudioElement;
        
        if (!objection) return

        objection.addEventListener('click', () => {
            objectionSound.play();
            objection.classList.remove("hover:animate-bouncing");
            objection.classList.add("animate-tada");

            objectionSound.onended = () => {
                objection.classList.remove("animate-tada");
                objection.classList.add("hover:animate-bouncing");
            }
        }) 
    })
</script>

<style>
    main {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 1rem;
    }

    picture {
        width: 100%;
        height: 30rem;
        overflow: hidden;
        position: relative;
        mask-image: linear-gradient(
		  black 60%,
		  transparent
		)
    }

    picture img {
        position: absolute;
        top: 20px;
        width: 100%;
        height: auto;
    }

    aside {
        text-align: center;
    }

    .data-title {
        color: var(--color-badge);
    }

    .is-liked {
        color: green;
    }

    .is-disliked {
        color: red;
    }


</style>
